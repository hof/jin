# Default localization for the Scripter plugin


Scripter.pluginName = Scripter

# The values are used by ScriptDialog
Scripter.eventTypeNames.connection = Connection
Scripter.eventTypeNames.plainText = Text (Unparsed text)
Scripter.eventTypeNames.game = Game
Scripter.eventTypeNames.seek = Seek
Scripter.eventTypeNames.friends = Friends
Scripter.eventTypeNames.userInvoked = User Invoked

Scripter.eventSubtypeNames.connection.attempt = Attempt 
Scripter.eventSubtypeNames.connection.connect = Connect
Scripter.eventSubtypeNames.connection.login = Login
Scripter.eventSubtypeNames.connection.disconnect = Disconnect

Scripter.eventSubtypeNames.game.gameStart = Game Start
Scripter.eventSubtypeNames.game.move = Move
Scripter.eventSubtypeNames.game.takebackOrBackward = Takeback/Backward
Scripter.eventSubtypeNames.game.boardFlip = Board Flip
Scripter.eventSubtypeNames.game.illegalMoveAttempt = Illegal Move Attempt
Scripter.eventSubtypeNames.game.clockUpdate = Clock Update
Scripter.eventSubtypeNames.game.otherPositionChange = Other Position Change
Scripter.eventSubtypeNames.game.offers = Offers
Scripter.eventSubtypeNames.game.gameEnd = Game End

Scripter.eventSubtypeNames.seek.post = Post
Scripter.eventSubtypeNames.seek.withdraw = Withdraw

Scripter.eventSubtypeNames.friends.online = Online
Scripter.eventSubtypeNames.friends.connected = Connected
Scripter.eventSubtypeNames.friends.disconnected = Disconnected
Scripter.eventSubtypeNames.friends.added = Added
Scripter.eventSubtypeNames.friends.removed = Removed


ScripterPreferencesPanel.scriptsLabel.text = &Scripts

ScripterPreferencesPanel.addScriptButton.text = &Add script

ScripterPreferencesPanel.editScriptButton.text = &Edit script

ScripterPreferencesPanel.removeScriptButton.text = &Remove script

ScripterPreferencesPanel.scriptEnabledCheckBox.text = Script e&nabled

ScripterPreferencesPanel.scriptExplanation.commands = \
  Allows specifying a condition and a list of commands\n\
  which will be sent to the server when the condition is met.\n\
  This is the simplest script type and requires no previous\n\
  knowledge of any programming/scripting languages.

ScripterPreferencesPanel.scriptExplanation.beanshell = \
  Allows specifying a BeanShell script which will be run\n\
  when a certain event occurs. BeanShell is essentially a Java\n\
  source interpreter with certain scripting features. BeanShell\n\
  scripts are therefore simply small pieces of Java code that\n\
  can be run without compiling. For more information about\n\
  BeanShell see http://www.beanshell.org/. Use this script\n\
  type if you have at least basic knowledge of Java.

ScripterPreferencesPanel.scriptTypeSelectionDialog.title = Choose Script Type

ScripterPreferencesPanel.serverCommandsScriptTypeRadioButton.text = &Server Commands

ScripterPreferencesPanel.beanshellScriptTypeRadioButton.text = &BeanShell Script (Java)

ScripterPreferencesPanel.scriptTypeSelectionDialog.nextButton.text = Next

ScripterPreferencesPanel.scriptTypeSelectionDialog.cancelButton.text = Cancel



ScriptDialog.selectEventTypeString = Select event type

ScriptDialog.scriptNameLabel.text = Script &Name:

ScriptDialog.eventTypeLabel.text = Event &Type:

ScriptDialog.eventSubtypesLabel.text = Event &Subtypes:

ScriptDialog.eventTypeHelpButton.text = &Help...
ScriptDialog.eventTypeHelpButton.tooltip = Event type help

ScriptDialog.eventSubtypesHelpButton.text = H&elp...
ScriptDialog.eventSubtypesHelpButton.tooltip = Event subtype help

ScriptDialog.eventTypeHelpDialog.title = Event type help
ScriptDialog.eventTypeHelpDialog.message = \
  \  When you choose the event type, you specify what type of event your script\n\
  is is intended to "respond" to. In other words, what must happen for Jin to run\n\
  your script. You can find the documentation of the various event types at\n\
  http://www.jinchess.com/docs/scripter/.

ScriptDialog.eventSubtypesHelpDialog.title = Event subtypes help
ScriptDialog.eventSubtypesHelpDialog.message = \
  \  The event subtypes selection specifies which of the subtypes of the chosen\n\
  event type your script will "respond" to. If the selected event type has no\n\
  subtypes, then no checkboxes will appear and your script will be run whenever an\n\
  event of the chosen type occurs. You can find the documentation of the various\n\
  subtypes at http://www.jinchess.com/docs/scripter/ (first specify the chess\n\
  server you're using, then click on the event type you selected).

ScriptDialog.scriptDialogOkButton.text = OK

ScriptDialog.scriptDialogCancelButton.text = Cancel

ScriptDialog.missingScriptNameDialog.title = Missing Script Name
ScriptDialog.missingScriptNameDialog.message = You must specify a script name

ScriptDialog.missingEventTypeDialog.title = Missing Event Type
ScriptDialog.missingEventTypeDialog.message = You must specify an event type

ScriptDialog.missingEventSubtypeDialog.title = Missing Event Subtype
ScriptDialog.missingEventSubtypeDialog.message = You must select at least one event subtype


BeanShellScriptDialog.title = BeanShell Script

BeanShellScriptDialog.codeLabel.text = &Code:

BeanShellScriptDialog.helpButton.text = He&lp...
BeanShellScriptDialog.helpButton.tooltip = Beanshell help

BeanShellScriptDialog.helpDialog.title = Beanshell code help
BeanShellScriptDialog.helpDialog.message = \
  \  BeanShell is a Java source interpreter, meaning that beanshell scripts are\n\
  essentially pieces of Java code. BeanShell, however, also has scripting features\n\
  which extend (or break, depends on how you feel) the Java language. This means,\n\
  for example, that you don't have to declare the type of a variable when you use\n\
  it. You can also hold different types of objects in the same variable at\n\
  different times. You can find a complete description of the BeanShell language\n\
  at http://www.beanshell.org/docs.html.\n\
  \n\
  \  Your code doesn't start running in a blank environment - you already have a\n\
  bunch of useful variables and methods defined which you can use. The most useful\n\
  is the sendCommand(String) method which simply sends the specified string to the\n\
  server. You can also use various variables whose exact identity and values are\n\
  determined by the type and subtype of the event that your script is running on.\n\
  A list of the "built-in" methods and variables is available at\n\
  http://www.jinchess.com/docs/scripter/\n\
  \n\
  \  An interesting property of how your BeanShell scripts are executed is that\n\
  they are stateful - they keep their state between separate runs of the same\n\
  script. Let's look at the following user invoked script, for example:\n\
  \n\
  if (start)\n\
  \  var = 0;\n\
  else\n\
  \  var++;\n\
  \n\
  sendCommand("tell fishbait " + var);\n\
  \n\
  \  When you first run it, you can pass true as the value for start and false on\n\
  consecutive executions. Each time you execute it, the value of var will be\n\
  increased and fishbait will receive tells with "0", "1", "2" etc. (which might\n\
  annoy him quite a bit, so I recommend trying it on yourself instead ;-)).

BeanShellScriptDialog.malformedScriptDialog.title = Malformed Script
# {0} is the actual error description
BeanShellScriptDialog.malformedScriptDialog.message = Malformed code:\n{0}



CommandsScriptDialog.title = Commands Script

CommandsScriptDialog.conditionLabel.text = &Condition:

CommandsScriptDialog.commandsLabel.text = Co&mmands:

CommandsScriptDialog.conditionHelpButton.text = He&lp...
CommandsScriptDialog.conditionHelpButton.tooltip = Condition help

CommandsScriptDialog.commandsHelpButton.text = Hel&p...
CommandsScriptDialog.commandsHelpButton.tooltip = Commands help

CommandsScriptDialog.conditionHelpDialog.title = Commands condition help
CommandsScriptDialog.conditionHelpDialog.message = \
  \  The condition allows you to specify your own custom filter (on top of the\n\
  event type and subtype selections) which determines when your script is run.\n\
  When an event of the chosen type and one of the chosen subtypes occurs, it will\n\
  be subjected to filtering by the condition you specify. If it passes that as\n\
  well, your script will be run.\n\
  \n\
  \  The condition must be a valid Java boolean expression. While it may sound a\n\
  bit scary at first, it is really quite easy - all you have to do is write down a\n\
  list of simple conditions, such as "oppRating > 2000" or\n\
  "gameResult.equals("win")", surround them with round brackets and then connect\n\
  them with either "&&" or "||" strings, where "&&" stands for "and" and "||"\n\
  stands for "or".\n\
  \n\
  \n\
  Here are some examples so you see how easy it is:\n\
  \n\
  "(myTime > 10) || (oppRating >= 1800)"\n\
  \  Means that you get 11 or more minutes on your clock or the opponent's rating\n\
  \  must be at least 1800 (or both - "or" in computer languages means at least one\n\
  \  of the conditions has to be true - if they are both true, then all the\n\
  \  better).\n\
  \n\
  "(sender.equals("AlexTheGreat")) && (message.equals("Hello"))"\n\
  \  Means that the sender must be AlexTheGreat and the message he sent must be\n\
  \  "Hello".\n\
  \n\
  "(oppRating > 2300) || (oppTitle.indexOf("GM") != -1)"\n\
  \  This is a slightly more complicated example. The first part of the condition\n\
  \  is easy - it means that the opponent's rating must be higher than 2300. The\n\
  \  second part uses the function "indexOf". That function looks for the specified\n\
  \  string ("GM" in our case) inside the string it was called on (oppTitle in our\n\
  \  case) and returns the index of its first appearance. More importantly, if it\n\
  \  doesn't find the string "GM" inside oppTitle (in our example), it will\n\
  \  return -1. Thus what we are checking with "oppTitle.indexOf("GM") != -1" is\n\
  \  basically that "GM" is a substring of the opponent's title, meaning that he is\n\
  \  a Grandmaster (On ICC and FICS, at least).\n\
  \  Finally, the two parts are connected with the "or" sign, meaning that the\n\
  \  whole expression will be true if at least one of the parts is true.\n\
  \n\
  IMPORTANT: The examples in this help file are surrounded with quotes - you do\n\
  NOT need to surround your condition in quotes when you write it.\n\
  \n\
  \  Note that if you don't specify a condition, a default condition which always\n\
  evaluates to true will be generated for you (meaning that the script will always\n\
  be run if an event of the proper type and subtype occurs).\n\
  \n\
  \  For a list and documentation of the variables (such as oppRating, myTime etc.)\n\
  you can use when writing scripts for various event types/subtypes, visit\n\
  http://www.jinchess.com/docs/scripter/.\n\
  \n\
  \  When you finish writing your script and click the "OK" button, Jin will try to\n\
  test your condition by evaluating it with dummy values for the variables to make\n\
  sure that it's valid. Since the variables it uses have dummy values, it may\n\
  sometimes tell you that the condition is malformed even though it is ok. This\n\
  should, however, happen very rarely, so make sure to check your condition again\n\
  before going ahead and telling Jin to use it anyway.

CommandsScriptDialog.commandsHelpDialog.title = Commands help
CommandsScriptDialog.commandsHelpDialog.message = \
  \  The commands are the "meat" of your script. You specify a single command on\n\
  each line. These will be sent to the server when the script is run, after some\n\
  processing. The processing allows you to add "variables" inside the commands\n\
  which are replaced with the "variable" values before the command is sent.\n\
  Those variables are specified by a dollar sign ('$') followed by the variable\n\
  name. The processing then looks for this pattern and replaces its occurances\n\
  with the value of the variable.\n\
  \n\
  \n\
  Let's look at some examples to get an idea of how it works:\n\
  \n\
  "tell Gorgonian Hello"\n\
  \  This will simply send the above command to the server.\n\
  \n\
  "tell $sender Hello"\n\
  \  Assuming that this script is responding to Chat Events (which provide a\n\
  \  "sender" variable) with the Personal Tell subtype enabled, and you received a\n\
  \  tell from Kiebitz, the command sent to the server will be "tell Kiebitz Hello"\n\
  \n\
  "tell $sender What do you mean by "$message"?"\n\
  \  This is a funny script I used to test the scripter. Basically this replies to\n\
  \  the sender asking him what he meant by his tell to you (or to a channel, or\n\
  \  shout, or any other Chat Event subtype you chose). The variable "message"\n\
  \  is replaced by the content of the sender's tell.\n\
  \n\
  "tell $who $what"\n\
  \  There are currently no "who" and "what" variables in any of the event types,\n\
  \  so what good is this script? It is good for User Invoked scripts! When you run\n\
  \  a User Invoked script, Jin will ask you to provide a list of variables and\n\
  \  their values, which it will then use to "process" the script. This allows you\n\
  \  to create "aliases" which you later run, although they are somewhat less\n\
  \  comfortable to use than real aliases.\n\
  \n\
  IMPORTANT: The examples in this help file are surrounded with quotes - you do\n\
  NOT need to surround your commands in quotes when you write them.\n\
  \n\
  Note that if you use a variable that isn't defined, it will not be replaced and\n\
  will be sent as specified, in its "$variable" form.\n\
  \n\
  For a list and documentation of the variables (such as sender, message etc.)\n\
  you can use when writing scripts for various event types/subtypes, visit\n\
  http://www.jinchess.com/docs/scripter/.

CommandsScriptDialog.malformedConditionDialog.title = Malformed Condition
# {0} is the actual error description
CommandsScriptDialog.malformedConditionDialog.message = \
  The specified condition seems to be malformed.\n\
  The error is:\n{0}\n\n\
  Use the condition anyway?

CommandsScriptDialog.malformedScriptDialog.title = Malformed Script
# {0} is the actual error description
CommandsScriptDialog.malformedScriptDialog.message = Malformed condition or commands:\n{0}
